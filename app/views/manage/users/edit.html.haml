- page_title 'Edit User'

.container
  .row.pt-3
    .col.pb-3
      %h1.brand-primary Edit User
  .row
  * Indicates required field
  .row.mt-2
    .col
      = form_with model: @user, url: [:manage, @user], method: :patch, local: true do |f|
        %h5 User Profile
        .row
          .col
            .form-group
              %label(for="user_name") Name *
              = f.text_field :name, autofocus: true, class: "form-control #{form_error_class(@user, :name)}", required: true
              = model_error_display(@user, :name)
          .col
            .form-group
              %label(for="user_display_name") Display Name *
              = f.text_field :display_name, class: "form-control #{form_error_class(@user, :display_name)}", required: true
              = model_error_display(@user, :display_name)
        .row
          .col
            .form-group
              %label(for="user_email") Email *
              = f.email_field :email, class: "form-control #{form_error_class(@user, :email)}", required: true
              = model_error_display(@user, :email)
          .col
            .form-group
              %label(for="user_phone") Phone *
              = f.text_field :phone, class: "form-control #{form_error_class(@user, :phone)}", required: true
              = model_error_display(@user, :phone)
        .row
          .col
            .form-group
              %label(for="user_address") Address *
              = f.text_field :address, class: "form-control #{form_error_class(@user, :address)}", required: true
              = model_error_display(@user, :address)
          .col
            .form-group
              %label(for="user_city") City *
              = f.text_field :city, class: "form-control #{form_error_class(@user, :city)}", required: true
              = model_error_display(@user, :city)
        .row
          .col
            .form-group
              %label(for="user_state") State *
              = f.select :state, US_STATES, {}, { class: "form-control custom-select #{form_error_class(@user, :state)}" }
              = model_error_display(@user, :state)
          .col
            .form-group
              %label(for="user_zip") ZIP Code *
              = f.text_field :zip, class: "form-control #{form_error_class(@user, :zip)}", required: true
              = model_error_display(@user, :zip)
        .row
          .col
            .form-group
              %label(for="user_time_zone") Time Zone *
              = f.select(:time_zone, ['Alaska', 'Hawaii', 'Pacific Time (US & Canada)', 'Mountain Time (US & Canada)', 'Central Time (US & Canada)', 'Eastern Time (US & Canada)'].sort, {}, { class: 'custom-select form-control' })
              = model_error_display(@user, :time_zone)
          .col
            .form-group
              %label(for="user_birthdate") Birthdate *
              = f.text_field :birthdate, class: "flatpickr-date form-control #{form_error_class(@user, :birthdate)}", required: true
              = model_error_display(@user, :birthdate)
        .row
          .col
            .form-group
              %label(for="user_gender") Gender
              = f.select :gender, User::GENDER, {include_blank: true}, { class: "form-control custom-select #{form_error_class(@user, :gender)}" }
              = model_error_display(@user, :gender)
          .col
            .form-group
              %label(for="user_ethnicity") Race/Ethnicity
              = f.select :ethnicity, User::ETHNICITY, {include_blank: true}, { class: "form-control custom-select #{form_error_class(@user, :ethnicity)}" }
              = model_error_display(@user, :ethnicity)
        .row
          .col
            .form-group
              %label(for="user_relationship_status") Relationship Status
              = f.select :relationship_status, User::RELATIONSHIP_STATUS, { include_blank: true }, { class: "form-control custom-select #{form_error_class(@user, :relationship_status)}" }
              = model_error_display(@user, :relationship_status)
          .col
            .form-group
              %label(for="user_education_level") Education Level
              = f.select :education_level, User::EDUCATION_LEVEL, { include_blank: true }, { class: "form-control custom-select #{form_error_class(@user, :education_level)}" }
              = model_error_display(@user, :education_level)
        .row
          .col
            .form-group
              %label(for="user_occupation") Occupation
              = f.text_field :occupation, class: "form-control #{form_error_class(@user, :occupation)}"
              = model_error_display(@user, :occupation)
          .col
            .form-group
              %label(for="user_languages") Languages
              = f.text_field :languages, class: "form-control #{form_error_class(@user, :languages)}"
              = model_error_display(@user, :languages)
        .row
          .col
            .form-group
              %label(for="user_interest_types") Primary Interest *
              = f.select :interest_types, INTEREST_TYPES, {}, { class: "form-control custom-select #{form_error_class(@user, :interest_types)}" }
              = model_error_display(@user, :interest_types)
          .col
            .form-group
              %label(for="user_hobbies") Other Interests
              = f.text_field :hobbies, class: "form-control #{form_error_class(@user, :hobbies)}"
              = model_error_display(@user, :hobbies)
        .row
          .col-6
            .form-group
              %label(for="user_pet_peeves") Pet Peeves
              = f.text_field :pet_peeves, class: "form-control #{form_error_class(@user, :pet_peeves)}"
              = model_error_display(@user, :pet_peeves)
        .row
          .col
            .form-group
              %label(for="user_bio") Bio
              = f.text_area :bio, rows: 4, class: "form-control #{form_error_class(@user, :bio)}"
              = model_error_display(@user, :bio)
        .row.border-top
        %h5.mt-2 User Management
        .row
          .col-6
            .form-group
              %label(for="group") Group
              %i.c-pointer.fas.fa-info-circle.fa{:title => 'Use this field to manage large groups of Users through categorization'}
              = f.text_field :group, placeholder: 'E.g., Sales Team, Volunteer, White Hall Dormitory, Alpha, etc.', class: "form-control #{form_error_class(@user, :group)}"
              = model_error_display(@user, :group)
          .col-6
            .form-group
              %label(for="user_status") User Status
              = @user.user_pending?(f)
              = model_error_display(@user, :user_status)
        .row
          .col-6
            .card
              .card-body.text-center
                .form-check.mb-1
                  = f.check_box :manager, class: 'form-check-input'
                  %label.form-check-label(for="user_manager") Manager - User Performs as a Community Manager
        .row.pt-2.border-top
          .col
            %p.text-muted Change the Password (note: at least 8 characters long and contain numbers and letters)
        .row
          .col
            .form-group
              %label(for="user_password") New Password
              = f.password_field :password, class: "form-control #{form_error_class(@user, :password)}"
              = model_error_display(@user, :password)
          .col
            .form-group
              %label(for="user_password_confirmation") Confirm New Password
              = f.password_field :password_confirmation, class: "form-control #{form_error_class(@user, :password_confirmation)}"
              = model_error_display(@user, :password_confirmation)
        .mb-3.text-center
          = f.submit 'Update', class: 'btn btn-primary', style: 'border: 1px solid black;', data: { disable_with: 'Updating...' }
          = link_to 'Cancel', manage_users_path, style: 'border: 1px solid black;', class: 'btn btn-outline-secondary'
